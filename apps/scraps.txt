
########## alldata.py ##########

def app():
    st.title("Features in Central Park, NYC")

    st.subheader("All Features")

    st.markdown(
        """
        The shown features were retrieved from Open Street Map's data mining tool
        [overpass turbo](http://overpass-turbo.eu/). For every feature/layer pulled from OSM,
        the specific query was:
        - building: `building=yes` and `building=museum` (for the MET)
        - garden: `leisure=garden`
        - grass: `landuse=grass`
        - pedestrian: `highway=pedestrian` (perhaps more humans are located here)
        - water: `natural=water`
        - stream: `waterway=stream`
        - woods: `natural=wood`
        - ... etc.
        """
    )

    with open('maps/cp_allfeaturesmap.html', 'r') as cp_all:
        cp_allfeatures_map = cp_all.read()

    components.html(cp_allfeatures_map, height=600)

    st.subheader("Relevant Features")

    st.markdown(
        """
        These are the relevant features we decided to choose to define a squirrel's
        geospatial relationship with Central Park: buildings, gardens, grass (like fields),
        pedestrian (walkways), water, streams, and woods.

        WHY: to simplify the amount of comparisons and in determining which feature a squirrel
        was most associated with (overlap of too many features is complicated)
        """
    )
    with open('maps/cp_featuresmap.html', 'r') as cp_bare:
        cp_features_map = cp_bare.read()

    components.html(cp_features_map, height=600)



########## extras ##########

# Header
st.header("This is a header")

# Text
st.text("data from the Squirrel Census")

# checkbox
if st.checkbox("Show/Hide"):
    st.text("Showing the widget")

# radio button
status = st.radio("Select Gender: ", ("Male", "Female"))
if (status == "Male"):
    st.success("Male")
else:
    st.success("Female")

# selection box
relev_features = ['building', 'garden', 'grass', 'pedestrian', 'water', 'woods']
feature = st.selectbox("relevant features in Central Park: ", relev_features)

# multi selection box
features = st.multiselect("relevant features in Central Park: ", relev_features)
st.write("You selected", len(features), "features")

# button
if (st.button("About")):
    st.text("So what, squirrels?")

# slider
level = st.slider("Select the buffer size", 1, 5)
st.text("Buffer size: {}".format(level))

"# central park features"

cp_allpd = pd.read_csv('dataframes/cp_allfeatures.csv')
cp_allpd['geometry'] = cp_allpd['geometry'].apply(wkt.loads)

cp_pd = pd.read_csv('dataframes/cp_features.csv')
cp_pd['geometry'] = cp_pd['geometry'].apply(wkt.loads)

cp_allfeatures = gpd.GeoDataFrame(cp_allpd, crs='epsg:4326')
cp_features = gpd.GeoDataFrame(cp_pd, crs='epsg:4326')


cp_allfeaturesmap = folium.Map(location=[40.7823, -73.96600],
                               zoom_start=14,
                               min_zoom=14,
                               tiles='cartodbpositron',
                               control_scale=True)


def to_geojson_map(df, feature, folium_map, color_var, fillOp):
    gen_stylefunc = lambda x: {'color': color_var, 'fillOpacity': fillOp}
    to_geojson = folium.GeoJson(df[df['feature_type'] == feature], name=feature, style_function=gen_stylefunc)
    to_geojson.add_to(folium_map)
    return


allfeatures = list(cp_allfeatures['feature_type'].unique())
allcolors = {'building': '#ad6f03',
             'garden': '#ff8cec',
             'grass': '#86b35d',
             'pedestrian': '#000000',
             'water': '#1795e8',
             'stream': '#1795e8',
             'woods': '#098f57',
             'paved': '#000000',
             'pitch: baseball': '#e0cdb4',
             'playground': '#f5931b',
             'sports center': '#960000',
             'bare_rock': '#525252',
             'toilet': '#103b91'}

for i in range(len(allfeatures)):
    to_geojson_map(cp_allfeatures, allfeatures[i], cp_allfeaturesmap, allcolors[allfeatures[i]], 0.6)

folium.LayerControl().add_to(cp_allfeaturesmap)

folium_static(cp_allfeaturesmap)

### MAPPING

def to_featuregroup_map(df, feature, folium_map, color_var, fillOp):
    gen_stylefunc = lambda x: {'color': color_var, 'fillOpacity': fillOp}
    to_geojson = folium.GeoJson(df[df['feature_type'] == feature], name=feature, style_function=gen_stylefunc)
    to_featuregroup = folium.FeatureGroup(name=feature)
    to_geojson.add_to(to_featuregroup)
    to_featuregroup.add_to(folium_map)
    return


test_map = folium.Map(location=[40.7823, -73.96600],
                      zoom_start=14,
                      min_zoom=14,
                      tiles='cartodbpositron',
                      control_scale=True)


### PERMUTATION TEST

for b in behaviors:
    for i in range(len(features)):
        f1 = features[i]
        for j in range(i + 1, len(features)):
            f2 = features[j]
            behavior_df = bfsqrls[[b, f1, f2]]
            grouped = behavior_df.groupby(behavior_df[b]).sum()
            grouped = grouped.divide(grouped.sum(axis=0), axis=1)
            observed_stat = abs(grouped.loc[1][1] - grouped.loc[1][0])

            stats = np.array([])

            for i in range(10000):
                shuffled = behavior_df[b].sample(frac=1).reset_index(drop=True)
                shuffled_df = behavior_df.assign(**{'shuffled ' + b: shuffled})
                shuffled_grouped = shuffled_df.groupby('shuffled ' + b).sum()
                shuffled_grouped = shuffled_grouped.divide(shuffled_grouped.sum(axis=0), axis=1)
                shuffled_stat = abs(shuffled_grouped.loc[1][2] - shuffled_grouped.loc[1][1])
                stats = np.append(stats, shuffled_stat)

            plt.hist(stats)
            plt.axvline(observed_stat, color='red')
            plt.show()

            p_value = np.mean(stats >= observed_stat)
            stats_rows.append([b, f1, f2, p_value])


### FEATURES

(Wanted individual feature selection)
# multi selection box
        features = st.multiselect("Choose relevant features in Central Park:", relev_features, key='selected')
        if st.checkbox("Show all relevant features"):
            folium_static(cp_featuresmap, width=620, height=680)
        else:
            cp_selectfeatures_map = folium.Map(location=[40.7823, -73.96600],
                                               zoom_start=14,
                                               min_zoom=14,
                                               tiles='cartodbpositron',
                                               control_scale=True)
            for feature in features:
                folium.GeoJson(cp_features[cp_features['feature_type'] == feature],
                               name=feature,
                               style_function=lambda x: {'color': all_colors.get(feature),
                                                         'fillOpacity': 0.6}
                               ).add_to(cp_selectfeatures_map)

            folium.LayerControl().add_to(cp_selectfeatures_map)
            folium_static(cp_selectfeatures_map, width=620, height=680)